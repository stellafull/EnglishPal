{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"EnglshiPal EnglsihPal lab documentation. Index Lab1 - Dependency Analysis and Dependency Graph Lab2 - The ORM Magic Project layout app/ main.py # Main function. ... .py # Module. static/ wordfreqapp_schema.sql # Generate database. ... ...","title":"Home"},{"location":"#englshipal","text":"EnglsihPal lab documentation.","title":"EnglshiPal"},{"location":"#index","text":"Lab1 - Dependency Analysis and Dependency Graph Lab2 - The ORM Magic","title":"Index"},{"location":"#project-layout","text":"app/ main.py # Main function. ... .py # Module. static/ wordfreqapp_schema.sql # Generate database. ... ...","title":"Project layout"},{"location":"lab1/","text":"EnglishPal Dependency Analysis and Dependency Graph Author: \u5360\u5065\u8c6a, \u738b\u5f66\u8d85, \u9648\u81f4\u8fdc, \u6c64\u4f73\u4f1f Date: 2021/5/17 Location: 22-206 Introduction EnglishPal is a website application dedicated to helping people improve their English. This lab study help us understand the current health level of the architecture of EnglishPal. Materials and Methods The module-level dependencies are captured by snakefood, and the class/function-level dependency graph for EnglilshPal is hand-drawn and can be plotted by Mermaid. Results EnglishPalModule.dot: strict digraph \"dependencies\" { graph [ rankdir=\"LR\", overlap=\"scale\", size=\"8,10\", ratio=\"fill\", fontsize=\"16\", fontname=\"Helvetica\", clusterrank=\"local\" ] node [ fontsize=10 shape=ellipse // style=filled // shape=box ]; \"UseSqlite.py\" [style=filled]; \"WordFreq.py\" [style=filled]; \"WordFreq.py\" -> \"wordfreqCMD.py\"; \"difficulty.py\" [style=filled]; \"difficulty.py\" -> \"wordfreqCMD.py\"; \"main.py\" [style=filled]; \"main.py\" -> \"UseSqlite.py\"; \"main.py\" -> \"WordFreq.py\"; \"main.py\" -> \"difficulty.py\"; \"main.py\" -> \"pickle_idea.py\"; \"main.py\" -> \"pickle_idea2.py\"; \"main.py\" -> \"wordfreqCMD.py\"; \"pickle_idea.py\" [style=filled]; \"pickle_idea2.py\" [style=filled]; \"wordfreqCMD.py\" [style=filled]; \"wordfreqCMD.py\" -> \"pickle_idea.py\"; } 2. class/function-level.txt graph LR load_freq_history -->pickle_idea.load_record verify_user --> Sqlite3Template.RecordQuery add_user -->Sqlite3Template.InsertQuery check_username_availability --> Sqlite3Template.RecordQuery get_expiry_date -->Sqlite3Template.RecordQuery get_today_article --> Sqlite3Template.RecordQuery get_today_article --> load_freq_history get_today_article --> difficulty.get_difficulty_level get_today_article --> user_difficulty_level get_today_article -->random.shuffle get_today_article -->random.choice get_today_article --> text_difficulty_level get_today_article --> within_range get_today_article --> get_answer_part mark_word --> load_freq_history mark_word --> pickle_idea.dict2lst mark_word --> pickle_idea.merge_frequency mark_word --> pickle_idea.save_frequency_to_pickle mainpage --> WordFreq mainpage --> load_freq_history mainpage --> pickle_idea.dict2lst mainpage --> pickle_idea.merge_frequency mainpage --> pickle_idea.save_frequency_to_pickle mainpage --> pickle_idea.dict2lst user_mark_word --> load_freq_history user_mark_word -->pickle_idea2.dict2lst user_mark_word -->pickle_idea2.merge_frequency user_mark_word -->pickle_idea2.save_frequency_to_pickle userpage --> WordFreq userpage --> pickle_idea.load_record userpage --> load_freq_history userpage --> sort_in_descending_order signup --> check_username_availability signup --> render_template signup --> add_user signup --> verify_user login --> render_template login --> verify_user difficulty.load_record --> pickle.load difficulty.difficulty_level_from_frequency --> math.log difficulty.get_difficulty_level --> revert_dict difficulty.get_difficulty_level --> sort_in_ascending_order difficulty.text_difficulty_level -->sort_in_descending_order pickle_idea.merge_frequency --> pickle_idea.lst2dict pickle_idea2.merge_frequency --> pickle_idea2.lst2dict Sqlite3Template.do --> Sqlite3Template.connect Sqlite3Template.do --> Sqlite3Template.instructions Sqlite3Template.do --> Sqlite3Template.operate WordFreq.get_freq --> wordfreqCMD.sort_in_descending_order graph LR load_freq_history -->pickle_idea.load_record verify_user --> Sqlite3Template.RecordQuery add_user -->Sqlite3Template.InsertQuery check_username_availability --> Sqlite3Template.RecordQuery get_expiry_date -->Sqlite3Template.RecordQuery get_today_article --> Sqlite3Template.RecordQuery get_today_article --> load_freq_history get_today_article --> difficulty.get_difficulty_level get_today_article --> user_difficulty_level get_today_article -->random.shuffle get_today_article -->random.choice get_today_article --> text_difficulty_level get_today_article --> within_range get_today_article --> get_answer_part mark_word --> load_freq_history mark_word --> pickle_idea.dict2lst mark_word --> pickle_idea.merge_frequency mark_word --> pickle_idea.save_frequency_to_pickle mainpage --> WordFreq mainpage --> load_freq_history mainpage --> pickle_idea.dict2lst mainpage --> pickle_idea.merge_frequency mainpage --> pickle_idea.save_frequency_to_pickle mainpage --> pickle_idea.dict2lst user_mark_word --> load_freq_history user_mark_word -->pickle_idea2.dict2lst user_mark_word -->pickle_idea2.merge_frequency user_mark_word -->pickle_idea2.save_frequency_to_pickle userpage --> WordFreq userpage --> pickle_idea.load_record userpage --> load_freq_history userpage --> sort_in_descending_order signup --> check_username_availability signup --> render_template signup --> add_user signup --> verify_user login --> render_template login --> verify_user difficulty.load_record --> pickle.load difficulty.difficulty_level_from_frequency --> math.log difficulty.get_difficulty_level --> revert_dict difficulty.get_difficulty_level --> sort_in_ascending_order difficulty.text_difficulty_level -->sort_in_descending_order pickle_idea.merge_frequency --> pickle_idea.lst2dict pickle_idea2.merge_frequency --> pickle_idea2.lst2dict Sqlite3Template.do --> Sqlite3Template.connect Sqlite3Template.do --> Sqlite3Template.instructions Sqlite3Template.do --> Sqlite3Template.operate WordFreq.get_freq --> wordfreqCMD.sort_in_descending_order 3. Pros and cons of the current architecture of EnglishPal: Shortcoming: The addition of the web pages makes the system inefficient to deliver media elements. All the processing tasks are done by the server before the delivery of the content to the client. The server inefficient to handle multiple user requests. Any development change or maintenance costs a lot. Advantages: Efficient with full-stack, no communication costs between front-end and back-end. Effective for simple and small projects, with simple CRUD and smaller codebase, it's more enough. Higher security, protecting the API from attack. Similar concept and syntax, it helps focusing on project features. It reduces the mistakes in communications. Discussions Through this lab we tried to understand the current health level of the architecture of EnglishPal. During the lab, we learnt to use Snakefood, Graphviz Online, Mermaid as well as Read the Docs. Most importantly, we mastered a basic work flow of analysing the structure and the dependency of an existing project which will sure to contribute to the future work. References Graphviz. https://graphviz.org/ Graphviz Online. https://bit.ly/3uYDiLV Read the Docs. https://readthedocs.org/ Snakefood: Python Dependency Graphs. http://furius.ca/snakefood/ Mermaid. https://mermaid-js.github.io/mermaid/#/ Jacopo Malnati. X-Ray 1.0.4.1, my Bachelor and Research Project. https://xray.inf.usi.ch/xray.php Sofia Peterson. A Brief Guide How to Write a Computer Science Lab Report. https://thehackpost.com/a-brief-guide-how-to-write-a-computer-science-lab-report.html lab1.pdf.","title":"Lab1"},{"location":"lab1/#englishpal-dependency-analysis-and-dependency-graph","text":"Author: \u5360\u5065\u8c6a, \u738b\u5f66\u8d85, \u9648\u81f4\u8fdc, \u6c64\u4f73\u4f1f Date: 2021/5/17 Location: 22-206","title":"EnglishPal Dependency Analysis and Dependency Graph"},{"location":"lab1/#introduction","text":"EnglishPal is a website application dedicated to helping people improve their English. This lab study help us understand the current health level of the architecture of EnglishPal.","title":"Introduction"},{"location":"lab1/#materials-and-methods","text":"The module-level dependencies are captured by snakefood, and the class/function-level dependency graph for EnglilshPal is hand-drawn and can be plotted by Mermaid.","title":"Materials and Methods"},{"location":"lab1/#results","text":"EnglishPalModule.dot: strict digraph \"dependencies\" { graph [ rankdir=\"LR\", overlap=\"scale\", size=\"8,10\", ratio=\"fill\", fontsize=\"16\", fontname=\"Helvetica\", clusterrank=\"local\" ] node [ fontsize=10 shape=ellipse // style=filled // shape=box ]; \"UseSqlite.py\" [style=filled]; \"WordFreq.py\" [style=filled]; \"WordFreq.py\" -> \"wordfreqCMD.py\"; \"difficulty.py\" [style=filled]; \"difficulty.py\" -> \"wordfreqCMD.py\"; \"main.py\" [style=filled]; \"main.py\" -> \"UseSqlite.py\"; \"main.py\" -> \"WordFreq.py\"; \"main.py\" -> \"difficulty.py\"; \"main.py\" -> \"pickle_idea.py\"; \"main.py\" -> \"pickle_idea2.py\"; \"main.py\" -> \"wordfreqCMD.py\"; \"pickle_idea.py\" [style=filled]; \"pickle_idea2.py\" [style=filled]; \"wordfreqCMD.py\" [style=filled]; \"wordfreqCMD.py\" -> \"pickle_idea.py\"; } 2. class/function-level.txt graph LR load_freq_history -->pickle_idea.load_record verify_user --> Sqlite3Template.RecordQuery add_user -->Sqlite3Template.InsertQuery check_username_availability --> Sqlite3Template.RecordQuery get_expiry_date -->Sqlite3Template.RecordQuery get_today_article --> Sqlite3Template.RecordQuery get_today_article --> load_freq_history get_today_article --> difficulty.get_difficulty_level get_today_article --> user_difficulty_level get_today_article -->random.shuffle get_today_article -->random.choice get_today_article --> text_difficulty_level get_today_article --> within_range get_today_article --> get_answer_part mark_word --> load_freq_history mark_word --> pickle_idea.dict2lst mark_word --> pickle_idea.merge_frequency mark_word --> pickle_idea.save_frequency_to_pickle mainpage --> WordFreq mainpage --> load_freq_history mainpage --> pickle_idea.dict2lst mainpage --> pickle_idea.merge_frequency mainpage --> pickle_idea.save_frequency_to_pickle mainpage --> pickle_idea.dict2lst user_mark_word --> load_freq_history user_mark_word -->pickle_idea2.dict2lst user_mark_word -->pickle_idea2.merge_frequency user_mark_word -->pickle_idea2.save_frequency_to_pickle userpage --> WordFreq userpage --> pickle_idea.load_record userpage --> load_freq_history userpage --> sort_in_descending_order signup --> check_username_availability signup --> render_template signup --> add_user signup --> verify_user login --> render_template login --> verify_user difficulty.load_record --> pickle.load difficulty.difficulty_level_from_frequency --> math.log difficulty.get_difficulty_level --> revert_dict difficulty.get_difficulty_level --> sort_in_ascending_order difficulty.text_difficulty_level -->sort_in_descending_order pickle_idea.merge_frequency --> pickle_idea.lst2dict pickle_idea2.merge_frequency --> pickle_idea2.lst2dict Sqlite3Template.do --> Sqlite3Template.connect Sqlite3Template.do --> Sqlite3Template.instructions Sqlite3Template.do --> Sqlite3Template.operate WordFreq.get_freq --> wordfreqCMD.sort_in_descending_order graph LR load_freq_history -->pickle_idea.load_record verify_user --> Sqlite3Template.RecordQuery add_user -->Sqlite3Template.InsertQuery check_username_availability --> Sqlite3Template.RecordQuery get_expiry_date -->Sqlite3Template.RecordQuery get_today_article --> Sqlite3Template.RecordQuery get_today_article --> load_freq_history get_today_article --> difficulty.get_difficulty_level get_today_article --> user_difficulty_level get_today_article -->random.shuffle get_today_article -->random.choice get_today_article --> text_difficulty_level get_today_article --> within_range get_today_article --> get_answer_part mark_word --> load_freq_history mark_word --> pickle_idea.dict2lst mark_word --> pickle_idea.merge_frequency mark_word --> pickle_idea.save_frequency_to_pickle mainpage --> WordFreq mainpage --> load_freq_history mainpage --> pickle_idea.dict2lst mainpage --> pickle_idea.merge_frequency mainpage --> pickle_idea.save_frequency_to_pickle mainpage --> pickle_idea.dict2lst user_mark_word --> load_freq_history user_mark_word -->pickle_idea2.dict2lst user_mark_word -->pickle_idea2.merge_frequency user_mark_word -->pickle_idea2.save_frequency_to_pickle userpage --> WordFreq userpage --> pickle_idea.load_record userpage --> load_freq_history userpage --> sort_in_descending_order signup --> check_username_availability signup --> render_template signup --> add_user signup --> verify_user login --> render_template login --> verify_user difficulty.load_record --> pickle.load difficulty.difficulty_level_from_frequency --> math.log difficulty.get_difficulty_level --> revert_dict difficulty.get_difficulty_level --> sort_in_ascending_order difficulty.text_difficulty_level -->sort_in_descending_order pickle_idea.merge_frequency --> pickle_idea.lst2dict pickle_idea2.merge_frequency --> pickle_idea2.lst2dict Sqlite3Template.do --> Sqlite3Template.connect Sqlite3Template.do --> Sqlite3Template.instructions Sqlite3Template.do --> Sqlite3Template.operate WordFreq.get_freq --> wordfreqCMD.sort_in_descending_order 3. Pros and cons of the current architecture of EnglishPal: Shortcoming: The addition of the web pages makes the system inefficient to deliver media elements. All the processing tasks are done by the server before the delivery of the content to the client. The server inefficient to handle multiple user requests. Any development change or maintenance costs a lot. Advantages: Efficient with full-stack, no communication costs between front-end and back-end. Effective for simple and small projects, with simple CRUD and smaller codebase, it's more enough. Higher security, protecting the API from attack. Similar concept and syntax, it helps focusing on project features. It reduces the mistakes in communications.","title":"Results"},{"location":"lab1/#discussions","text":"Through this lab we tried to understand the current health level of the architecture of EnglishPal. During the lab, we learnt to use Snakefood, Graphviz Online, Mermaid as well as Read the Docs. Most importantly, we mastered a basic work flow of analysing the structure and the dependency of an existing project which will sure to contribute to the future work.","title":"Discussions"},{"location":"lab1/#references","text":"Graphviz. https://graphviz.org/ Graphviz Online. https://bit.ly/3uYDiLV Read the Docs. https://readthedocs.org/ Snakefood: Python Dependency Graphs. http://furius.ca/snakefood/ Mermaid. https://mermaid-js.github.io/mermaid/#/ Jacopo Malnati. X-Ray 1.0.4.1, my Bachelor and Research Project. https://xray.inf.usi.ch/xray.php Sofia Peterson. A Brief Guide How to Write a Computer Science Lab Report. https://thehackpost.com/a-brief-guide-how-to-write-a-computer-science-lab-report.html lab1.pdf.","title":"References"},{"location":"lab2/","text":"Lab 2: The ORM Magic Introduction In this lab, we are going to learn the object-relational mapper (ORM) provided by SQLAlchemy. With ORM, we can map a class to a database table, and map an object of that class to a row in the database table. With SQLAlchemy\u2019s ORM, we can avoid directly using any raw SQL statements. More important,we will be able to follow the principle of dependency inversion \u2013 let ORM depend on the domain model,but not the other way around. We will create 3 files: model.py orm.py app.py Here app.py imports the above two python modules and generates an SQLite database exactly like EnglishPalDatabase.db Materials and Methods Work Flow Review and analyze the requirements in lab2.pdf. Learn about the relative knowledges in Chapter 2 of the course text book. Start with the code. Search for the coding techniques required online. Finish the coding process. Summarize and Write the document. Source Codes For this part, We implemented the incomplete function, class and used property to achieve the requirements. See the source codes and comments for detail. orm.py model.py app.py Results For this part we make screenshots to illustrate the results. After running app.py : Inside EnglishPalDatabase.db(Open with Navicat Premium) : list of tables: articles: newwords: readings: users: Discussions For this lab we learnt about the way to manipulate database with SQLAlchemy\u2019s ORM (object-relational mapper) instead of raw SQL statement in web application, which will bring convenience while making the architecture more clear. We tried to understand dependency inversion. Also, we learnt to use Read the Docs combining with Sphinx to manage our lab report. References lab2.pdf","title":"Lab2"},{"location":"lab2/#lab-2-the-orm-magic","text":"","title":"Lab 2: The ORM Magic"},{"location":"lab2/#introduction","text":"In this lab, we are going to learn the object-relational mapper (ORM) provided by SQLAlchemy. With ORM, we can map a class to a database table, and map an object of that class to a row in the database table. With SQLAlchemy\u2019s ORM, we can avoid directly using any raw SQL statements. More important,we will be able to follow the principle of dependency inversion \u2013 let ORM depend on the domain model,but not the other way around. We will create 3 files: model.py orm.py app.py Here app.py imports the above two python modules and generates an SQLite database exactly like EnglishPalDatabase.db","title":"Introduction"},{"location":"lab2/#materials-and-methods","text":"","title":"Materials and Methods"},{"location":"lab2/#work-flow","text":"Review and analyze the requirements in lab2.pdf. Learn about the relative knowledges in Chapter 2 of the course text book. Start with the code. Search for the coding techniques required online. Finish the coding process. Summarize and Write the document.","title":"Work Flow"},{"location":"lab2/#source-codes","text":"For this part, We implemented the incomplete function, class and used property to achieve the requirements. See the source codes and comments for detail. orm.py model.py app.py","title":"Source Codes"},{"location":"lab2/#results","text":"For this part we make screenshots to illustrate the results. After running app.py : Inside EnglishPalDatabase.db(Open with Navicat Premium) : list of tables: articles: newwords: readings: users:","title":"Results"},{"location":"lab2/#discussions","text":"For this lab we learnt about the way to manipulate database with SQLAlchemy\u2019s ORM (object-relational mapper) instead of raw SQL statement in web application, which will bring convenience while making the architecture more clear. We tried to understand dependency inversion. Also, we learnt to use Read the Docs combining with Sphinx to manage our lab report.","title":"Discussions"},{"location":"lab2/#references","text":"lab2.pdf","title":"References"}]}